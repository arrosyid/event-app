// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum PaymentStatus {
  pending
  paid
  failed
  expired
  canceled
}

enum NotificationType {
  purchase_success
  event_reminder // Already exists? Check existing Notification model if any
  event_canceled   // Already exists?
  checkin_success
  general
}

enum TicketStatus {
  active
  checked_in
}

model User {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(100)
  email         String   @db.VarChar(100)
  password      String   @db.VarChar(255) // Increased length for hash
  password_salt String   @db.VarChar(255) // Added field for salt
  phone_number  String   @db.VarChar(100)
  role          String   @db.VarChar(100)
  avatar        String?  @db.VarChar(255)
  is_active     Boolean
  created_at    DateTime @default(now())
  updated_at    DateTime?
  deleted_at    DateTime?
  deletedAt     DateTime?

  // relasi
  orders        Order[]
  notifications Notification[]
  tickets       Ticket[] // Changed casing

  @@unique([email])
  @@map("users")
}


// Model untuk Events
model Event {
  id               Int           @id @default(autoincrement())
  userId           Int           @map("user_id") // Foreign key ke users.id (hanya field skalar)
  name             String
  description      String        @db.Text
  startTime        DateTime      @map("start_time")
  endTime          DateTime      @map("end_time")
  location         String
  locationDetails  String?       @map("location_details") @db.Text // Nullable
  posterImageUrl   String?       @map("poster_image_url")          // Nullable
  category         String?                                          // Nullable
  capacity         Int
  status           String        @default("draft") // Menggunakan String (VARCHAR) sebagai pengganti ENUM
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  deletedAt        DateTime?

  // Relasi ke model yang disertakan
  ticketTypes      TicketType[]
  tickets          Ticket[]
  notifications    Notification[]

  @@map("events")
}

// Model untuk Jenis Tiket
model TicketType {
  id            Int      @id @default(autoincrement())
  eventId       Int      @map("event_id") // Foreign key ke events.id
  event         Event    @relation(fields: [eventId], references: [id]) // Relasi ke Event
  name          String
  price         Decimal  @db.Decimal(12, 2) // Sesuaikan presisi/skala jika perlu
  quantity      Int
  saleStartDate DateTime @map("sale_start_date")
  saleEndDate   DateTime @map("sale_end_date")
  description   String?  @db.Text // Nullable
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  deletedAt     DateTime?

  // Ensure quota field exists
  quota Int?
  sold  Int? @default(0) // Add a field to track sold tickets for easier quota checks

  // Relasi ke model yang disertakan
  tickets       Ticket[]
  orderItems OrderItem[]

  @@map("ticket_types")
}

// Model untuk Tiket Individual (E-Ticket)
model Ticket {
  id                Int             @id @default(autoincrement())
  eventId           Int             @map("event_id") // Foreign key ke events.id
  event             Event           @relation(fields: [eventId], references: [id]) // Relasi ke Event
  ticketTypeId      Int             @map("ticket_type_id") // Foreign key ke ticket_types.id
  ticketType        TicketType      @relation(fields: [ticketTypeId], references: [id]) // Relasi ke TicketType
  userId            Int             @map("user_id") // Foreign key ke users.id (pemilik tiket)
  user              User            @relation(fields: [userId], references: [id]) // Added relation back to User
  attendeeName      String          @map("attendee_name")
  attendeeEmail     String          @map("attendee_email")
  uniqueCode        String          @unique @map("unique_code")
  qrCodeUrl         String?         @map("qr_code_url") // Nullable
  //status            String          @default("issued") // Menggunakan String (VARCHAR) sebagai pengganti ENUM
  status            TicketStatus   @default(active)
  checkInTime       DateTime?       @map("check_in_time") // Nullable
  checkedInByUserId Int?            @map("checked_in_by_user_id") // FK ke users.id (scanner - hanya field skalar, nullable)
  orderItemId       Int             @map("order_item_id")
  orderItem         OrderItem       @relation(fields: [orderItemId], references: [id])
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  deletedAt         DateTime?

  @@map("tickets")
}

model Order {
  id                        Int           @id @default(autoincrement())
  userId                    Int           @map("user_id")
  orderCode                 String        @unique @map("order_code")
  totalAmount               Decimal       @map("total_amount") @db.Decimal(10, 2) // Adjust precision as needed
  paymentStatus             PaymentStatus @default(pending) @map("payment_status")
  paymentMethod             String?       @map("payment_method")
  paymentGatewayReference   String?       @map("payment_gateway_reference")
  paymentExpiryTime         DateTime?     @map("payment_expiry_time")
  orderedAt                 DateTime      @default(now()) @map("ordered_at")
  paidAt                    DateTime?     @map("paid_at")
  createdAt                 DateTime      @default(now()) @map("created_at")
  updatedAt                 DateTime      @updatedAt @map("updated_at")

  user         User          @relation(fields: [userId], references: [id])
  orderItems   OrderItem[]
  notifications Notification[] // Relation to Notification

  @@map("orders")
}

model OrderItem {
  id             Int      @id @default(autoincrement())
  orderId        Int      @map("order_id")
  ticketTypeId   Int      @map("ticket_type_id")
  // quantity removed as per clarification (always 1)
  pricePerTicket Decimal  @map("price_per_ticket") @db.Decimal(10, 2) // Price at time of order
  // subtotal removed (same as pricePerTicket since quantity is 1)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  order         Order       @relation(fields: [orderId], references: [id])
  ticketType    TicketType  @relation(fields: [ticketTypeId], references: [id])
  tickets       Ticket[]    // Fixed typo, Relation to Ticket

  // Ensure a user doesn't order the same ticket type for the same event twice in different *active* orders?
  // This might need a check in the service layer rather than a unique constraint here.

  @@map("order_items")
}


// --- Modify existing Notification model ---
// Add the relation field and potentially the order_id field if not present

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  eventId   Int?     @map("event_id")
  orderId   Int?     @map("order_id") // Add this if missing
  type      NotificationType // Use the new ENUM if needed, or map existing types
  message   String   @db.Text
  isRead    Boolean  @default(false) @map("is_read")
  sentAt    DateTime @default(now()) @map("sent_at")
  createdAt DateTime @default(now()) @map("created_at")

  user  User   @relation(fields: [userId], references: [id])
  event Event? @relation(fields: [eventId], references: [id])
  order Order? @relation(fields: [orderId], references: [id]) // Add this relation

  @@map("notifications")
}
